<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peter Wooldridge's Blog</title><link href="https://peterwooldridge.me/" rel="alternate"></link><link href="https://peterwooldridge.me/feeds/all.atom.xml" rel="self"></link><id>https://peterwooldridge.me/</id><updated>2021-02-16T08:35:00+00:00</updated><subtitle>I'm a Data Scientist with Type 1 Diabetes. Most of the time I'll write about one or the other.</subtitle><entry><title>Downloading glucose data from Dexcom using Node-RED</title><link href="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/" rel="alternate"></link><published>2021-02-16T08:35:00+00:00</published><updated>2021-02-16T08:35:00+00:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2021-02-16:/posts/2021/Feb/16/dexcom-download-pt1/</id><summary type="html">&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red.png" alt="Drawing" width="30%"/&gt;
  &lt;/p&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/dexcom.png" alt="Drawing" width="30%"/&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;I've been using the Dexcom continuous glucose monitors for about 4 years now. The sensor, currently the G6 model, attaches to my body and transmits glucose readings every 5 mins.
The sensor connects directly with the Dexcom smartphone app and then the data is sent to the Dexcom Share Servers …&lt;/p&gt;</summary><content type="html">&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red.png" alt="Drawing" width="30%"/&gt;
  &lt;/p&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/dexcom.png" alt="Drawing" width="30%"/&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;I've been using the Dexcom continuous glucose monitors for about 4 years now. The sensor, currently the G6 model, attaches to my body and transmits glucose readings every 5 mins.
The sensor connects directly with the Dexcom smartphone app and then the data is sent to the Dexcom Share Servers in the cloud.&lt;/p&gt;
&lt;p&gt;Dexcom has a web tool called Clarity which lets you view a report related to your CGM data. Dexcom Clarity is useful for exploring glucose data but, I wanted to start building a local copy of my glucose data to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Have a local backup of all of my glucose readings (Dexcom doesn't offer a download data option and if I change CGM providers I don't want to lose all that useful historic data)&lt;/li&gt;
&lt;li&gt;Build custom visualisations that are more relevant to my day-to-day tracking of my diabetes goals (I hope to show some of these in later posts)&lt;/li&gt;
&lt;li&gt;See how my control has fluctuated over the years (Clarity only lets me view or compare 90 days at a time)&lt;/li&gt;
&lt;li&gt;Combine other data sources so that I can explore how different situations affect my glucose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another tool for exploring glucose data is &lt;a class="reference external" href="https://nightscout.github.io/"&gt;Nightscout&lt;/a&gt; which I also use extensively. The reports are really useful; the only issue I have is that mongoDB database used in heroku (the cloud hosting platform) has a free tier limit of 512GB which for me gets filled up every few months forcing me to empty the database periodically - another reason for me wanting to creating a local copy.&lt;/p&gt;
&lt;div class="section" id="the-setup"&gt;
&lt;h2&gt;The Setup&lt;/h2&gt;
&lt;p&gt;The setup I've built uses a Raspberry Pi 4 and a software called &lt;a class="reference external" href="https://nodered.org/"&gt;Node-RED&lt;/a&gt; which comes pre-installed with Raspian. Node-RED is a low-code environment for events driven applications. There are loads of amazing applications of what can be done with this technology.&lt;/p&gt;
&lt;p&gt;For this project, I created a simple &lt;cite&gt;flow&lt;/cite&gt; in Node-RED that runs a few http requests to authenticate with the Dexcom servers, query my glucose and then finally puts results into a local mysql database running on the pi.&lt;/p&gt;
&lt;p&gt;A &lt;cite&gt;flow&lt;/cite&gt; is composed of a sequence of nodes that run sequentially and each perform a task. The results of each nodes task is fed into the next connected node till the chain is completed.&lt;/p&gt;
&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red-flow.png" alt="Drawing" width="100%" caption="sdfsdf"/&gt;
     &lt;figcaption&gt;How flows look in the Node-RED web interface&lt;/figcaption&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;Node-RED makes it really easy to schedule flows to run on a specific schedule. Since the Dexcom CGMs produce a glucose reading every 5 minutes, I set the flow to query the api every 2.5 minutes to ensure the database was topped up with the latest data.&lt;/p&gt;
&lt;p&gt;Eventually, hosting the database externally from the pi is probably a better idea as the flash storage on the pi is not ideal for backing up data longterm. That said, to get going quickly and start exploring the data, this was perfect.&lt;/p&gt;
&lt;p&gt;For anyone interested in how I built this setup, the following video details the setup step-by-step and, I've also walked through it in the remainder of this post.&lt;/p&gt;
&lt;div class="youtube"&gt;&lt;iframe src="https://www.youtube.com/embed/GRtUX1Wiqfo" width="512" height="320" allowfullscreen seamless frameBorder="0"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The remainder of this guide assumes you have a raspberry pi 4 booted and connected up to a display, and a dexcom account with which to pull glucose data from.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-and-configuring-node-red"&gt;
&lt;h2&gt;Setting up and configuring Node-RED&lt;/h2&gt;
&lt;p&gt;The Raspian operating system comes with Node-RED pre-installed so there's no installation required here. Node-RED can be started by clicking the &lt;cite&gt;Programming&lt;/cite&gt; menu at the top of the screen followed by &lt;cite&gt;Node-RED&lt;/cite&gt;. This will launch Node-RED inside a console.&lt;/p&gt;
&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red-menu.png" alt="Drawing" width="100%"/&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;The console will contain the url that we can access the web interface to Node-RED from. Once I've found the URL in the console, I can navigate to it using a web browser and connect to the web interface.&lt;/p&gt;
&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red-url.png" alt="Drawing" width="100%"/&gt;
     &lt;figcaption&gt;The console showing the Node-RED URL&lt;/figcaption&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;Starting Node-RED from the menu bar is perfectly fine but, if I accidentally close the console then it will stop. I'd recommend running Node-RED as a service, so that if the pi reboots it'll get auto-started and run in the background.&lt;/p&gt;
&lt;p&gt;Run the following in a terminal to setup the service which will auto-start Node-RED after the next reboot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; nodered.service
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Node-RED flow I built can be found at the following &lt;a class="reference external" href="https://github.com/pwwooldridge/dexcom-to-db"&gt;github repo&lt;/a&gt;. Flows are defined as json files and my repo contains two: &lt;cite&gt;dexcom-pull-eu.json&lt;/cite&gt; and &lt;cite&gt;dexcom-pull-us.json&lt;/cite&gt; for those in the EU and US respectively (the dexcom servers endpoints are different, but the flows are pretty much the same). The other difference is that I made the EU flow output glucose data in mmol/L and the US one in mg/dL by default.&lt;/p&gt;
&lt;p&gt;To import the flow into Node-RED you can copy and paste the JSON file to the clipboard and then inside the node-RED web interface, press &lt;cite&gt;Ctrl-i&lt;/cite&gt; to open up the import flow panel and paste your flow right in.&lt;/p&gt;
&lt;p&gt;After the flow is imported, you should see the nodes appear on the canvas. The next thing we need to do is install a couple of extra nodes that I've made use of. Click the 3 horizontal bars in the top right of the Node-RED interface, click &lt;cite&gt;manage palette&lt;/cite&gt; and then navigate to the &lt;cite&gt;install&lt;/cite&gt; tab. The two nodes that need to be installed are &lt;cite&gt;node-red-contrib-credentials&lt;/cite&gt; and &lt;cite&gt;node-red-node-mysql&lt;/cite&gt;. Go ahead and type these into the search, find the packages and install them at which point you should see the dashed lines around the outsides of the mysql and credentials nodes fill in on your canvas.&lt;/p&gt;
&lt;p&gt;I also made use of an additional nodejs library &lt;cite&gt;sql-template-strings&lt;/cite&gt; from inside this flow so I need to install this using npm. To do this, head out of Node-RED and open up a terminal from the &lt;cite&gt;Programming&lt;/cite&gt; menu in Raspian. Once you have a terminal open, run the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/.node-red
npm install sql-template-strings
nano settings.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last command will open up a nano text editor that allows you to edit the Node-RED settings file. Once in the settings.js file, scroll down until you see a section like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;functionGlobalContext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// os:require(&amp;#39;os&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;// jfive:require(&amp;quot;johnny-five&amp;quot;),&lt;/span&gt;
    &lt;span class="c1"&gt;// j5board:require(&amp;quot;johnny-five&amp;quot;).Board({repl:false})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;modify it to looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;functionGlobalContext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sqlModule&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sql-template-strings&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// os:require(&amp;#39;os&amp;#39;),&lt;/span&gt;
    &lt;span class="c1"&gt;// jfive:require(&amp;quot;johnny-five&amp;quot;),&lt;/span&gt;
    &lt;span class="c1"&gt;// j5board:require(&amp;quot;johnny-five&amp;quot;).Board({repl:false})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Press &lt;cite&gt;Ctrl+x&lt;/cite&gt; to save and come out of nano. To make the setting updates take effect, we need to restart Node-RED which can be done in the terminal as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo service node-red restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-mysql"&gt;
&lt;h2&gt;Setting up mysql&lt;/h2&gt;
&lt;p&gt;Now we're ready to get our database setup. Note: In Raspian, MariaDB is used as a drop-in replacement to MySQL. All MySQL commands should still work with MariaDB.&lt;/p&gt;
&lt;p&gt;We can use the terminal we used earlier to install and configure the database. The first step is to check for any package updates, by running the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above may take a while depending on how many updates are needed. After the updates have completed, we're ready to install MariaDB/MySQL with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mariadb-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the database is installed the next step is database configuration which involves setting a root password for the database. To start configuration wizard, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;mysql_secure_installation&lt;/code&gt; will first ask you to set a root password which has to be input twice. For the remaining questions I did:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Press &lt;code&gt;Y&lt;/code&gt; to remove anonymous users.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Y&lt;/code&gt; to disallow root login remotely.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Y&lt;/code&gt; to remove test database and user.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;Y&lt;/code&gt; to reload privilege tables. (last step)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we're done. We've now set the root password for connecting to our database.&lt;/p&gt;
&lt;p&gt;To be able to login with the password we just set, I had to change the database plugin from auth_socket to mysql_native_password. To do this, connect to the MySQL shell using &lt;code&gt;sudo mysql -u root&lt;/code&gt;, then run the following to switch the plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;USE&lt;/span&gt; &lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysql_native_password&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;FLUSH&lt;/span&gt; &lt;span class="k"&gt;PRIVILEGES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make the settings take effect, restart MySQL by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service mysql restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can connect to our database by using the following command (you'll be required to enter your root password):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command connects to the mysql database using the command line and allows us to run commands from the prompt directly on the database.&lt;/p&gt;
&lt;p&gt;We can use the mysql command line tool to create the database and tables to store the glucose data. First I'll create a database in mysql called &lt;code&gt;glucose&lt;/code&gt; and then connect to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;database&lt;/span&gt; &lt;span class="n"&gt;glucose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;glucose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once connected, I can create a table to store my glucose data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="n"&gt;glucose&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;date_string&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;primary&lt;/span&gt; &lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;     &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once I've executed this, I can press &lt;cite&gt;Ctrl-d&lt;/cite&gt; to exit from the mysql command line and head back to the node-RED web ui for the final setup part.&lt;/p&gt;
&lt;p&gt;Okay, we're nearly up and running. Final 3 small bits of setup to do back in Node-RED. First thing we need to do is add our dexcom &lt;cite&gt;accountId&lt;/cite&gt; and &lt;cite&gt;password&lt;/cite&gt; into the credentials node so that Node-RED can authenticate with dexcom. To do this, double click on the node called &lt;cite&gt;credentials&lt;/cite&gt; in your flow and type in your accountId and password.&lt;/p&gt;
&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/16/dexcom-download-pt1/node-red-credentials.png" alt="Drawing" width="100%"/&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;p&gt;Next, double click on the orange mysql node called &lt;cite&gt;diabetes&lt;/cite&gt;. Similar to the credentials node setup, double click the node, add &amp;quot;root&amp;quot; as the database user and for the password, use the one you setup in the database setup. For the database put &amp;quot;diabetes&amp;quot;. Click done.&lt;/p&gt;
&lt;p&gt;The final piece of setup involves setting up the flow to run on a regular repeating schedule. To do this, double click on the blue inject node on the very left-hand side of the flow - the name is usually &amp;quot;timestamp&amp;quot;. Double click it and ensure the &amp;quot;Inject once after&amp;quot; box is unticked and then in the repeat dropdown choose interval and make the frequency 150 seconds. Click done to close the dialog and click the red deploy button in the top right.&lt;/p&gt;
&lt;p&gt;The deploy button will launch our flow. Assuming there are no issues upon launching it will continue to run, till we say otherwise. If we've configured everything correctly, we should see in a few minutes time records appearing in the database. Inside the mysql command line, we can check how many records have been created by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;diabetes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;glucose&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return a number, hopefully greater than zero, indicating that glucose records are being synced into the database and WE ARE DONE!&lt;/p&gt;
&lt;p&gt;Thanks for reading this far! If you try to set this setup up yourself, check out the video where I go into a bit more detail on testing the flow as I go.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>A serious rethink on carbs taught to me by Mastering Diabetes</title><link href="https://peterwooldridge.me/posts/2021/Feb/09/carbs-rethink/" rel="alternate"></link><published>2021-02-09T17:40:00+00:00</published><updated>2021-02-09T17:40:00+00:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2021-02-09:/posts/2021/Feb/09/carbs-rethink/</id><summary type="html">&lt;p&gt;I've observed the pattern so many thousands of times:
eating high carb foods cause the biggest fluctuations in my post-meal glucose.
Therefore, high carbs are problematic and best avoided. This is the deeply ingrained mental model
I've been working with for the last 25 years to manage my type 1 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've observed the pattern so many thousands of times:
eating high carb foods cause the biggest fluctuations in my post-meal glucose.
Therefore, high carbs are problematic and best avoided. This is the deeply ingrained mental model
I've been working with for the last 25 years to manage my type 1 diabetes. How could this be wrong?&lt;/p&gt;
&lt;p&gt;Well, owing to some extra free time over lockdown, I came across the Mastering Diabetes book.&lt;/p&gt;
&lt;p&gt;I've had so many aha moments reading this and relating the evidenced based approaches with my own experience
with T1D. One of the many things I took away was a complete rethink on carbs.&lt;/p&gt;
&lt;embed&gt;
  &lt;p align="center"&gt;
     &lt;img src="https://peterwooldridge.me/posts/2021/Feb/09/carbs-rethink/md_book.jpeg" alt="Drawing" width="60%"/&gt;
  &lt;/p&gt;
&lt;/embed&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It's refreshing to see an approach that goes against the grain of
conventional diabetes wisdom and advocates carbs as the
main dietary component. This appeals to me particularly because I do a lot of endurance sport.
Carbohydrates are necessary for keeping glycogen stores topped up which are called upon to fuel intense workouts.
I've followed a number of low carb approaches in the past and, whilst they gave me great glucose control, they often
left me a little flat on the sharp end of hard workouts.&lt;/p&gt;
&lt;p&gt;The book states that labelling carbs as the enemy has actually given rise to a whole
host of the confusion that we see today around carbs and diabetes.
The carbs story, as detailed in the book, is much more nuanced for two main reasons.&lt;/p&gt;
&lt;p&gt;Firstly, in order to talk meaningfully about carbs it's important
to distinguish between refined and unrefined. Refined carbs are essentially those that have undergone
processing of one kind or another for example removing the bran from a grain and
grinding the grain to make flour. These types of carbs tend to get absorbed very quickly by the body. The opposite
is true of unrefined carbs which are composed of longer chain carbohydrate molecules and release glucose into the bloodstream
much more slowly. Plant foods, the main component of the mastering diabetes approach, are a fantastic source of unrefined carbs.&lt;/p&gt;
&lt;p&gt;The second reason is that high glucose values following a high carb meal are
actually indicative of a state of insulin resistance and not an issue with
carbs themselves. Insulin resistance is a state whereby the body's tissues have
a lower level of response to insulin
meaning glucose cannot be absorbed as efficiently by cells leaving it lingering in the blood.&lt;/p&gt;
&lt;p&gt;Up to this point I've sort of thought that insulin resistance was more of a type 2 diabetes problem
but, as the book clarified, it can and does occur in all types of diabetes.
In fact the mechanisms that bring about insulin resistance are the same regardless
of types of diabetes. Insulin resistance is caused by:&lt;/p&gt;
&lt;p class="center"&gt;&lt;em&gt;The accumulation of fat in tissues that are not designed to store large quantities of fat&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For type 1's like myself, becoming more sensitive to insulin has the advantage that I need to
take less of the stuff. Less insulin means a smaller margin for error day-to-day and therefore I have
a greater chance of keeping my glucose levels steady.&lt;/p&gt;
&lt;p&gt;Whilst avoiding post meal spikes and generally taking less insulin are good enough reasons for me to work
on become as sensitive as possible to insulin, the other perhaps more important reason is
because insulin resistance is the cause of whole
host of diabetes complications - basically you name it, it's there.&lt;/p&gt;
&lt;p&gt;The Mastering Diabetes approach consists of
a 5-pillar approach to maximising insulin sensitivity. I won't go into all 5 elements in
this post but the first is adopting a low-fat plant based diet which, if the references are to go by,
seems to be the biggest bang for your buck when trying to reverse insulin resistance. I first started following
the diet during the summer and could not quite believe how much more effective my insulin became!&lt;/p&gt;
&lt;p&gt;Another huge eye opener for me in the book was the idea that tight glucose control alone
is not sufficient alone to minimise risk of future complications.
Research such as &lt;a class="reference external" href="https://care.diabetesjournals.org/content/26/5/1374"&gt;this&lt;/a&gt;
paper, referenced in the book, concluded in a study of 603 type 1 patients that insulin resistance
was a better predictor of future coronary artery disease than glucose control!&lt;/p&gt;
&lt;p&gt;I've spent the best part
of 25 years fixating on HBA1Cs as my overarching success metric when it comes to my diabetes.
Whilst long term glucose control is and always will be super important,
the book helped me open my perspectives and not over fixate on a single dimension of health.&lt;/p&gt;
&lt;p&gt;I really love the evidenced based approach Cyrus and Robby have taken with this book. I've just
enrolled in their online coaching course so expect more posts on this topic soon. In the meantime, I'd
encourage anyone with diabetes to read this, it taught me so many things and perhaps
more importantly caused me to challenge a few of my ingrained assumptions, not least around carbs.&lt;/p&gt;
</content></entry><entry><title>The single UNIX setting that always saves me time</title><link href="https://peterwooldridge.me/posts/2021/Jan/31/unix_efficiency/" rel="alternate"></link><published>2021-01-31T12:15:00+00:00</published><updated>2021-01-31T12:15:00+00:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2021-01-31:/posts/2021/Jan/31/unix_efficiency/</id><summary type="html">&lt;p&gt;Anyone who spends a lot of time on the command line will know the frustration of trying to locate a previous command from your bash history. The following configuration allows a simple one button ability to search through your bash history using the up and down arrows. Unlike other approaches …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anyone who spends a lot of time on the command line will know the frustration of trying to locate a previous command from your bash history. The following configuration allows a simple one button ability to search through your bash history using the up and down arrows. Unlike other approaches like CTRL-R, which search the history for a substring anywhere in the command, this method will search the history using the text to the left of the cursor. So, if I type &lt;code&gt;ls&lt;/code&gt; and then up I will cycle through the most recent commands starting with &lt;code&gt;ls&lt;/code&gt;. I personally find this makes it a much faster way to locate previous commands. To set it, simply add the following lines to ~/.inputrc:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\e[A&amp;quot;&lt;/span&gt;: history-search-backward
&lt;span class="s2"&gt;&amp;quot;\e[B&amp;quot;&lt;/span&gt;: history-search-forward
&lt;/pre&gt;&lt;/div&gt;
</content></entry><entry><title>Support Vector Machines (Part 1)</title><link href="https://peterwooldridge.me/posts/2019/Sep/04/svm_1/" rel="alternate"></link><published>2019-09-04T11:56:00+01:00</published><updated>2019-09-04T11:56:00+01:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2019-09-04:/posts/2019/Sep/04/svm_1/</id><summary type="html">&lt;p&gt;Support Vector Machines (SVMs) are a versatile classification algorithm that should be a staple in every data scientists toolbox. In this first of a series of posts, my goal is to describe the intuition behind SVMs what makes them such a powerful technique for classification.&lt;/p&gt;
&lt;p&gt;Suppose we want to classify …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Support Vector Machines (SVMs) are a versatile classification algorithm that should be a staple in every data scientists toolbox. In this first of a series of posts, my goal is to describe the intuition behind SVMs what makes them such a powerful technique for classification.&lt;/p&gt;
&lt;p&gt;Suppose we want to classify the red dots from the blue in the figure below. Plotted on the axes are an orange, black and green hyperplane. All three perfectly separate the red and blue classes. So which one is the best choice to split our data?&lt;/p&gt;
&lt;p align="center"&gt;
   &lt;img src="images/multiple_hyperplanes.png" alt="drawing" width="500"/&gt;  
&lt;/p&gt;

&lt;p&gt;The hardest points to classify are those sat closest to the hyperplane. Therefore, a decision boundary that creates a large gap between the classes is preferable because new data points are more likely to be correctly classified. The SVM defines this criterion as finding a decision boundary that is maximally far away from any data point. The distance between the decision boundary and the closest data point determines the margin of the classifier.&lt;/p&gt;
&lt;p&gt;The figure below shows the data being separated by the largest margin decision boundary. The maximum margin decision boundary is defined by two parallel hyperplanes, one that goes through the positive data points closest to the decision boundary and one that goes through the negative points closest to the decision boundary. These are known as the support vectors.&lt;/p&gt;
&lt;p align="center"&gt;
   &lt;img src="images/maximal_margin.png" alt="Drawing" width="500"/&gt;
&lt;/p&gt;

&lt;p&gt;Mathematically, we can summarise what we have described so far.&lt;/p&gt;
&lt;p&gt;Suppose we are given &lt;span class="math"&gt;\(N\)&lt;/span&gt; training vectors &lt;span class="math"&gt;\(\{(x^{(i)}, y^{(i)}); i=0, \dots, N\}, \text{ where } x ∈ \mathbb{R}^{D}, y ∈ \{−1, 1\}\)&lt;/span&gt;. We want to learn a set of weights &lt;span class="math"&gt;\(w\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt; such that the linear combination of weights and input data predicts the value of y.&lt;/p&gt;
&lt;div class="math"&gt;$$
h_{w,b}(x) =
     \begin{cases}
       1 &amp;amp;\quad\text{if }w^{T} x + b &amp;gt;= 0\\
       -1 &amp;amp;\quad\text{otherwise}
     \end{cases}
$$&lt;/div&gt;
&lt;p&gt;In the two dimensional case, our decision boundary &lt;span class="math"&gt;\(w^{T} x + b = 0\)&lt;/span&gt; is simply a line with the regions above and below it represented by &lt;span class="math"&gt;\(w^{T}x + b &amp;gt; 0\)&lt;/span&gt; and &lt;span class="math"&gt;\(w^{T}x + b &amp;lt; 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p align="center"&gt;
   &lt;img src="images/decision_boundary.png" alt="Drawing" width="500"/&gt;
&lt;/p&gt;

&lt;h3&gt;Distance between points and the hyperplane&lt;/h3&gt;
&lt;p&gt;We know that we want to find the values of &lt;span class="math"&gt;\(w\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt; that provide the widest margin. Therefore, we need a way to measure the distance between a given point and the hyperplane. Let's define &lt;span class="math"&gt;\(\gamma^{(i)}\)&lt;/span&gt; to be the distance between the &lt;span class="math"&gt;\(i^{th}\)&lt;/span&gt; training observation &lt;span class="math"&gt;\(x^{(i)}\)&lt;/span&gt; and our hyperplane.&lt;/p&gt;
&lt;p&gt;Consider the decision boundary shown in the figure below. If we define &lt;span class="math"&gt;\(x_{0}\)&lt;/span&gt; to be a vector on the hyperplane. Then the &lt;span class="math"&gt;\(x^{(i)} - x_{0}\)&lt;/span&gt; represents a vector from &lt;span class="math"&gt;\(x^{(i)}\)&lt;/span&gt; to the hyperplane. The dotted black line from &lt;span class="math"&gt;\(x^{(i)}\)&lt;/span&gt; to the hyperplane represents the vector whose distance is the shortest to the hyperplane. This dotted line forms a right-angled triangle with the hyperplane and we can label the unknown angle at the top of our triangle &lt;span class="math"&gt;\(\theta\)&lt;/span&gt;. The vector &lt;span class="math"&gt;\(w^{*}\)&lt;/span&gt; represents the unit vector perpendicular to the hyperplane.&lt;/p&gt;
&lt;p align="center"&gt;
   &lt;img src="images/svm_distance_to_hyperplane.png" alt="Drawing" width="500"/&gt;
&lt;/p&gt;

&lt;p&gt;Using trigonometry, and setting &lt;span class="math"&gt;\(f = x^{(i)} - x_{0}\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\cos{\theta} = \dfrac{\text{adjacent}}{\text{hypothenuse}}\\
\implies \cos{\theta} = \dfrac{\gamma^{(i)}}{\|f\|}\\
\implies \|f\|\cos{\theta} = \gamma^{(i)}\\
\implies \dfrac{\|w^{*}\|}{\|w^{*}\|}\|f\|\cos{\theta} = \gamma^{(i)}\\
\implies fw^{*} = \gamma^{(i)}\\
\implies \dfrac{(x^{(i)} - x_{0})w}{\|w\|} = \gamma^{(i)}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and then using &lt;span class="math"&gt;\(wx_{0} = -b\)&lt;/span&gt;, since &lt;span class="math"&gt;\(x_{0}\)&lt;/span&gt; lies on the hyperplane, we have:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\implies \dfrac{wx^{(i)} + b}{\|w\|} = \gamma^{(i)}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We will see below how this distance is used in the definitions of the Functional and Geometric margins defined below.&lt;/p&gt;
&lt;h3&gt;Functional and Geometric Margins&lt;/h3&gt;
&lt;p&gt;Given a training example &lt;span class="math"&gt;\((x^{(i)}, y^{(i)})\)&lt;/span&gt;, we define the functional margin of &lt;span class="math"&gt;\((w, b)\)&lt;/span&gt; with
respect to a training example as:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\hat{\gamma}^{(i)} = y^{(i)}(w^{T} x^{(i)} + b)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The functional margin serves as a test function to determine whether a given training point is classified correctly. For a training example to be correctly classified &lt;span class="math"&gt;\(\hat{\gamma}^{(i)} \geq 0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One problem with the functional margin is that it can be affected by an arbitrary scaling of &lt;span class="math"&gt;\(w\)&lt;/span&gt; and &lt;span class="math"&gt;\(b\)&lt;/span&gt;. That brings us onto the definition of the geometric margin:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\gamma^{(i)} = \hat{\gamma}^{(i)}/\|w\|\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The geometric margin is telling you not only if a point is properly classified or not, but the magnitude of that distance in term of units of |w|. It is invariant to any scaling of &lt;span class="math"&gt;\(w\)&lt;/span&gt; or &lt;span class="math"&gt;\(b\)&lt;/span&gt; which will be important later. The geometric margin should look familiar as the distance between a training point and our hyperplane that we derived in the previous section multiplied by the label &lt;span class="math"&gt;\(y^{(i)}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Given a training set&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S = \{(x^{(i)}, y^{(i)}); i=1 \dotsc n\}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;we define the geometric margin of &lt;span class="math"&gt;\((w,b)\)&lt;/span&gt; with respect to &lt;span class="math"&gt;\(S\)&lt;/span&gt; to be the smallest of the geometric margins on the individual training examples:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\gamma = \min_{i=1 \dotsc n} \gamma ^ {(i)}\)&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;The optimal margin classifier&lt;/h3&gt;
&lt;p&gt;In order to find the widest margin classifier, we want to maximise the geometric margin whilst still correctly classifying all our training examples. This can be formulated as the following optimisation problem:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\max_{w, b} \gamma \quad\)&lt;/span&gt; s.t. &lt;span class="math"&gt;\(\quad \dfrac{y^{(i)}(w^{T} x^{(i)} + b)}{\|w\|}\geq \gamma \text{ for } i=1 \dotsc n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It turns out that the above problem is hard to optimise. Therefore, we convert it to any equivalent problem that happends to be easier to solve. For any solution to satisfy the above equation, any positively scaled multiple will also, due to the fact that the geometric margin is invariant to scaling of &lt;span class="math"&gt;\(w\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Therefore, we can scale &lt;span class="math"&gt;\(w\)&lt;/span&gt; in such a way that &lt;span class="math"&gt;\(\|w\| = \dfrac{1}{\gamma}\)&lt;/span&gt;. Also note that maximising &lt;span class="math"&gt;\(\dfrac{1}{\|w\|}\)&lt;/span&gt; is the same as minimising &lt;span class="math"&gt;\(\|w\|\)&lt;/span&gt; which is the same as minimising &lt;span class="math"&gt;\(\dfrac{1}{2}\|w\|^{2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Thus, we can reformulate the optimisation problem as:  &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\min_{w, b} \dfrac{1}{2}\|w\|^{2} \quad\)&lt;/span&gt; s.t. &lt;span class="math"&gt;\(\quad y^{(i)}(w^{T} x^{(i)} + b)\geq 1 \text{ for } i=1 \dotsc n\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This optimisation problem is known as a quadratic optimisation problem which is easier to solve. The solution to this optimisation problem will be the topic for a future post.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content></entry><entry><title>Visualising networks in R using atomic plot functions</title><link href="https://peterwooldridge.me/posts/2017/Sep/28/heatmaps_in_r/" rel="alternate"></link><published>2017-09-28T21:13:00+01:00</published><updated>2017-09-28T21:13:00+01:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2017-09-28:/posts/2017/Sep/28/heatmaps_in_r/</id><summary type="html">&lt;p&gt;One of the most natural ways to visualise a social network is a network diagram which consists of a series of dots representing the entity in the network and lines representing the relationships between the entities. This type of visualisation looks as follows:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="images/standard-network-plot.png" /&gt;
&lt;/div&gt;
&lt;p&gt;We can encode community information to this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the most natural ways to visualise a social network is a network diagram which consists of a series of dots representing the entity in the network and lines representing the relationships between the entities. This type of visualisation looks as follows:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="images/standard-network-plot.png" /&gt;
&lt;/div&gt;
&lt;p&gt;We can encode community information to this type of plot by colouring the nodes according to the communitiy memberships.&lt;/p&gt;
&lt;p&gt;As Mike Bostock &lt;a class="reference external" href="https://bost.ocks.org/mike/miserables/"&gt;showed&lt;/a&gt;, another interesting way to visualise a network is with the adjacency matrix. As a reminder the Adjacency matrix is defined as follows:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{equation*}
A_{ij} = \left\{
\begin{array}{lr}
1 &amp;amp; : \text{if }i\text{ connected to }j\\
0 &amp;amp; : \text{otherwise}
\end{array}
\right.
\end{equation*}
&lt;/div&gt;
&lt;p&gt;The usefullness of the visualisation of the adjacency matrix depends largely on the order of the rows and columns in the plot. By finding communities in the network, we can reorder the rows and columns of the adjacency matrix accordingly to produce a plot that looks as follows:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="images/lesmis.png" /&gt;
&lt;/div&gt;
&lt;p&gt;In this post I show how to create the above plot using atomic plot functions in R. The coloured blocks down the diagonal of the plot represent the different communities in the network.&lt;/p&gt;
&lt;p&gt;To get started, the first thing we need is some data in a matrix object. We load the same Les Misérables data as used for the visualisation &lt;a class="reference external" href="https://bost.ocks.org/mike/miserables/"&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jsonlite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;igraph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;json_data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;fromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://bost.ocks.org/mike/miserables/miserables.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fromJSON&lt;/code&gt; function reads the les miserables data into a list containing information about the nodes and edges in the graph. We extract two fields from the list, a vector of character names and the edge data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;json_data[[1]]&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="n"&gt;edges&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;json_data[[2]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can view these two objects:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Myriel&amp;quot;&lt;/span&gt;          &lt;span class="s"&gt;&amp;quot;Napoleon&amp;quot;&lt;/span&gt;        &lt;span class="s"&gt;&amp;quot;Mlle.Baptistine&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Mme.Magloire&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;[5]&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;CountessdeLo&amp;quot;&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;Geborand&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;1&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;    &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;      &lt;span class="m"&gt;3&lt;/span&gt;      &lt;span class="m"&gt;2&lt;/span&gt;     &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;4&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;      &lt;span class="m"&gt;5&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;edges&lt;/code&gt; object contains information about which node (source column) is connected to which (target column) and the co-occurence number (value column). This a succint way to represent a matrix as we only have rows for the non-zero matrix elements. Representing a matrix in this way is known as Triplet representation.&lt;/p&gt;
&lt;p&gt;Next, we convert each of the numeric columns of &lt;code&gt;edges&lt;/code&gt; into character names by iterating through each row of &lt;code&gt;edges&lt;/code&gt; and replacing the &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; numbers with the name of the character at that index of the characters array. We add one to the index to account for the fact that R indexes from one not zero.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MARGIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;src_idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;span class="m"&gt;+1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;dest_idx&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;span class="m"&gt;+1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;characters[src_idx]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;characters[dest_idx]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="n"&gt;edges_w_names&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stringsAsFactors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nf"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.character&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;as.numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;edges_w_names&lt;/code&gt; is a three column data.frame that looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="n"&gt;source&lt;/span&gt;          &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;        &lt;span class="n"&gt;Napoleon&lt;/span&gt;          &lt;span class="n"&gt;Myriel&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="n"&gt;Mlle.Baptistine&lt;/span&gt;          &lt;span class="n"&gt;Myriel&lt;/span&gt;     &lt;span class="m"&gt;8&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;    &lt;span class="n"&gt;Mme.Magloire&lt;/span&gt;          &lt;span class="n"&gt;Myriel&lt;/span&gt;    &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;    &lt;span class="n"&gt;Mme.Magloire&lt;/span&gt; &lt;span class="n"&gt;Mlle.Baptistine&lt;/span&gt;     &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;5&lt;/span&gt;    &lt;span class="n"&gt;CountessdeLo&lt;/span&gt;          &lt;span class="n"&gt;Myriel&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;        &lt;span class="n"&gt;Geborand&lt;/span&gt;          &lt;span class="n"&gt;Myriel&lt;/span&gt;     &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we convert from the character name matrix in Triplet representation into a fully dense matrix object. In order to do this we make use of the &lt;code&gt;graph.data.frame&lt;/code&gt; object from the igraph package. The &lt;code&gt;get.adjacency&lt;/code&gt; function is builds a dense matrix from the igraph object. Because the edges in our network are un-directed the adjacency matrix will be a symmetric matrix&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;graph.data.frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;edges_w_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;directed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;adj_mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;get.adjacency&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sparse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we have the igraph &lt;code&gt;gdf&lt;/code&gt; object, we can use it to detect communities in our network. There are several clustering routines built into igraph. Here we use the &lt;code&gt;cluster_infomap&lt;/code&gt; function which returns amongst other things an object containing membership attributes for each node in the graph&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# cluster graph&lt;/span&gt;
&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;igraph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;cluster_infomap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;membership&lt;/span&gt;
&lt;span class="c1"&gt;# how many communities are there&lt;/span&gt;
&lt;span class="n"&gt;n_cluster&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# reorder accordign to cluster memberships&lt;/span&gt;
&lt;span class="n"&gt;adj_mat&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="nf"&gt;[order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we're ready to create the actual plot. I've added comments into the code below to try and better explain what's happening&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# open a png handle&lt;/span&gt;
&lt;span class="nf"&gt;png&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lesmis.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# set up plot parameters&lt;/span&gt;
&lt;span class="nf"&gt;par&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Roboto Light&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;col.main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# create an empty plot (use axis=F so we can customise axis later)&lt;/span&gt;
&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;xlim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
     &lt;span class="n"&gt;ylim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
     &lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Les Misérables Co-occurance Matrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# define community colours&lt;/span&gt;
&lt;span class="n"&gt;cluster_cols&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;categorical_pal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cluster&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# iterate over each row and column of adjacency matrix and draw rectangles onto the plot&lt;/span&gt;
&lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;lapply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# each entry in matrix is an edge so if communities differ pick the smallest&lt;/span&gt;
    &lt;span class="n"&gt;cluster_no&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;[j]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;[i]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# draw squares on the plot&lt;/span&gt;
    &lt;span class="nf"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;xleft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;xright&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;ytop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;ybottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;pch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;cex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;ifelse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat[i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cluster_cols[cluster_no]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# draw the x and y axis with the character names&lt;/span&gt;
&lt;span class="nf"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;colnames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col.ticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col.axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;las&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cex.axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;rownames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col.ticks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;col.axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;las&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cex.axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# add a grid to the plot&lt;/span&gt;
&lt;span class="nf"&gt;abline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nf"&gt;ncol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adj_mat&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;lty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# close the plot device (i.e. write the png to disk)&lt;/span&gt;
&lt;span class="nf"&gt;dev.off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have shown how using the atomic plot functions in R we can create some nice looking visualisations of network data. The full code is available at &lt;a class="reference external" href="https://github.com/pwwooldridge/les-mis-adjacency-vis"&gt;this github repo&lt;/a&gt;&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="R"></category><category term="networks"></category><category term="visualisation"></category></entry><entry><title>Linear Regression from first principles</title><link href="https://peterwooldridge.me/posts/2017/Sep/12/linear_regression/" rel="alternate"></link><published>2017-09-12T21:46:00+01:00</published><updated>2017-09-12T21:46:00+01:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2017-09-12:/posts/2017/Sep/12/linear_regression/</id><summary type="html">&lt;p&gt;Linear regression allows one to model a dependent variable with the best straight line fit to a set of predictor variables. In the simplest scenario we have a single predictor variable. This is called simple linear regression.&lt;/p&gt;
&lt;p&gt;As an example let's take the trees dataset provided by the datasets package …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Linear regression allows one to model a dependent variable with the best straight line fit to a set of predictor variables. In the simplest scenario we have a single predictor variable. This is called simple linear regression.&lt;/p&gt;
&lt;p&gt;As an example let's take the trees dataset provided by the datasets package in R. The data consists of measurements of girth, height and volume of 31 felled black cherry trees. Suppose we wish to try and predict the volume of a black cherry tree from its girth. To begin with we can plot the two variables using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Volume&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Girth (inches)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylab&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Volume (cubic feet)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2017/Sep/12/linear_regression/tree_girths.png" /&gt;
&lt;/div&gt;
&lt;p&gt;The data certainly looks to have a linear relationship. A straight line equation in 2 dimensions can be defined by two variables namely the slope and intercept. Different choices for these parameters will produce different best fit lines as shown in the plot below:&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2017/Sep/12/linear_regression/possible_linear_fits.png" /&gt;
&lt;/div&gt;
&lt;p&gt;The left hand figure above shows linear fits with varying slopes and a fixed intercept. The right hand figure shows linear fits with varying intercepts and constant slopes. We want to find the combination of parameters for which our line best fits the data.&lt;/p&gt;
&lt;p&gt;We'll return back to the trees example but suppose that in general we observe &lt;span class="math"&gt;\(n\)&lt;/span&gt; pairs of data points &lt;span class="math"&gt;\((x_1, y_1), (x_2, y_2),\ldots, (x_n, y_n)\)&lt;/span&gt; for &lt;span class="math"&gt;\(i = 1,2,\ldots n\)&lt;/span&gt;. We can define a linear relationship by writing each observation pair as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(y_i = \beta_1 x_i + \beta_0 + \epsilon_i \qquad i = 1,2,\ldots n \tag{2}\label{2}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta_1\)&lt;/span&gt; represent the slope and intercept respectively of our straight line fit. The &lt;span class="math"&gt;\(\epsilon_i\)&lt;/span&gt; are called residuals and represent the random variation of the &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; around the straight line fit. Thought of another way each &lt;span class="math"&gt;\(\epsilon_i\)&lt;/span&gt; is the error between the true value of our response variable &lt;span class="math"&gt;\(y_i\)&lt;/span&gt; and the prediction given by our linear regression.&lt;/p&gt;
&lt;p&gt;We wish to find an intercept/slope &lt;span class="math"&gt;\((\beta_0, \beta_1)\)&lt;/span&gt; combination that minimises the &lt;span class="math"&gt;\(\epsilon_i\)&lt;/span&gt; for &lt;span class="math"&gt;\(i = 1,2,\ldots n\)&lt;/span&gt; meaning that our prediction errors are small. The most popular method of achieving this is to compute the sum of the squares of the residuals for &lt;span class="math"&gt;\(i = 1,2,\ldots n\)&lt;/span&gt; and choose values of &lt;span class="math"&gt;\(\beta_0\text{ and }\beta_1\)&lt;/span&gt; that minimise this quanity. Mathematically we can write the residual sum of square (RSS) as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(RSS = \sum_{i=1}^n \epsilon_i^2 \tag{3}\label{3}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;rearranging &lt;span class="math"&gt;\(\eqref{2}\)&lt;/span&gt; to make &lt;span class="math"&gt;\(\epsilon_i\)&lt;/span&gt; the subject:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\epsilon_i = y_i - \beta_1 x_i - \beta_0 \tag{4}\label{4}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;substituting &lt;span class="math"&gt;\(\eqref{4}\)&lt;/span&gt; into &lt;span class="math"&gt;\(\eqref{3}\)&lt;/span&gt; we get:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(RSS = \sum_{i=1}^n (y_i - \beta_1 x_i - \beta_0)^2 \tag{5}\label{5}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;To minimise &lt;span class="math"&gt;\(\eqref{5}\)&lt;/span&gt; we differentiate &lt;span class="math"&gt;\(RSS\)&lt;/span&gt; with respect to both &lt;span class="math"&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta_1\)&lt;/span&gt; set the resulting quantity equal to zero and solve the two equations.&lt;/p&gt;
&lt;p&gt;We can make use of the chain rule which states that for a composite function of the form:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp; F(x) = f(g(x)) \\
\end{align*}
&lt;/div&gt;
&lt;p&gt;the deriviate is given by&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(F'(x) = f'(g(x)) g'(x) \tag{6}\label{6}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Applying &lt;span class="math"&gt;\(\eqref{6}\)&lt;/span&gt; to &lt;span class="math"&gt;\(\eqref{5}\)&lt;/span&gt; we get:&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\frac{\partial RSS}{\partial \beta_0} = -2 \sum_{i=1}^n (y_i - \beta_1 x_i - \beta_0) \label{7}\tag{7}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\frac{\partial RSS}{\partial \beta_1} = -2 \sum_{i=1}^n x_i (y_i - \beta_1 x_i - \beta_0) \label{8}\tag{8}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We set the above equations equal to zero and solve for &lt;span class="math"&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta_1\)&lt;/span&gt; to find the minima. Starting with &lt;span class="math"&gt;\(\eqref{7}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp; 0 = -2 \sum_{i=1}^n (y_i - \beta_1 x_i - \beta_0) \\
&amp;amp; 0 = \sum_{i=1}^n (y_i - \beta_1 x_i - \beta_0) \\
&amp;amp; 0 = \sum_{i=1}^n y_i - \beta_1 \sum_{i=0}^n x_i -n \beta_0 \\
&amp;amp; n \beta_0 = \sum_{i=1}^n y_i - \beta_1 \sum_{i=1}^n x_i
\end{align*}
&lt;/div&gt;
&lt;p&gt;making use of &lt;span class="math"&gt;\(\bar{x} = \frac{\sum_{i=1}^n x_i}{n}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\bar{y} = \frac{\sum_{i=1}^n y_i}{n}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp; \beta_0 = \bar{y} - \beta_1 \bar{x} \label{9}\tag{9} \\
\end{align*}
&lt;/div&gt;
&lt;p&gt;Now we repeat the same process for &lt;span class="math"&gt;\(\beta_{1}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp; 0 = -2 \sum_{i=1}^n x_i (y_i - \beta_1 x_i - \beta_0) \\
&amp;amp; 0 = \sum_{i=1}^n x_i (y_i - \beta_1 x_i - \beta_0)
\end{align*}
&lt;/div&gt;
&lt;p&gt;substituting in the value for &lt;span class="math"&gt;\(\beta_0\)&lt;/span&gt; obtained in &lt;span class="math"&gt;\(\eqref{9}\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;
\begin{align*}
&amp;amp; 0 = -2 \sum_{i=1}^n x_i (y_i - \beta_1 x_i - \bar{y} + \beta_1 \bar{x}) \\
&amp;amp; 0 = \sum_{i=1}^n x_i (y_i - \bar{y}) + \beta_1 \sum_{i=1}^n x_i (\bar{x} - x_i) \\
\\
&amp;amp; \beta_1 = \frac{-\sum_{i=1}^n x_i(y_i - \bar{y})}{\sum_{i=1}^n x_i(\bar{x} - x_i)} \\
\\
&amp;amp; \beta_1 = \frac{-\sum_{i=1}^n (x_i y_i - x_i \bar{y})}{\sum_{i=1}^n (x_i \bar{x} - x_i^2)} \\
\\
&amp;amp; \beta_1 = \frac{\bar{y} \sum_{i=1}^n x_i - \sum_{i=1}^N x_i y_i}{\sum_{i=1}^n x_i - \sum_{i=1}^n x_i^2} \\
\\
&amp;amp; \beta_1 = \frac{n \bar{x} \bar{y} - \sum_{i=1}^n x_i y_i}{n \bar{x}^2 - \sum_{i=1}^n x_i^2}
\end{align*}
&lt;/div&gt;
&lt;p&gt;We have now derived least squares estimates for &lt;span class="math"&gt;\(\beta_0\)&lt;/span&gt; and &lt;span class="math"&gt;\(\beta_1\)&lt;/span&gt; using simple linear regression. Armed with these we can generate parameter estimates for the cherry tree regression:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;nrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x_bar&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y_bar&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Volume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xi_yi_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Volume&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xi_squared_sum&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt; &lt;span class="n"&gt;^&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;beta_1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x_bar&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y_bar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xi_yi_sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x_bar^2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;xi_squared_sum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;beta_0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;y_bar&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;beta_1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x_bar&lt;/span&gt;

&lt;span class="n"&gt;beta_1&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;5.065856&lt;/span&gt;
&lt;span class="n"&gt;beta_0&lt;/span&gt;
&lt;span class="n"&gt;[1]&lt;/span&gt; &lt;span class="m"&gt;-36.94346&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ofcourse R has a built in function (lm) to build a linear regression. We can use this function to compare the estimates we produced above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fit&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="nf"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Volume&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;coefficients&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Intercept&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;trees&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;Girth&lt;/span&gt;
&lt;span class="m"&gt;-36.943459&lt;/span&gt;    &lt;span class="m"&gt;5.065856&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which match our derived estimates.&lt;/p&gt;
&lt;script type='text/javascript'&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="linear models"></category><category term="R"></category></entry><entry><title>JOGLE in 106 hours</title><link href="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/" rel="alternate"></link><published>2016-11-03T11:41:00+00:00</published><updated>2016-11-03T11:41:00+00:00</updated><author><name>Peter Wooldridge</name></author><id>tag:peterwooldridge.me,2016-11-03:/posts/2016/Nov/03/jogle_in_106/</id><summary type="html">&lt;div class="section" id="day-1-john-o-groats-to-fort-william"&gt;
&lt;h2&gt;Day 1 : John O' Groats to Fort William&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 90%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/screen-shot-2016-11-04-at-10-32-501.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After a long long drive for the support crew from Plymouth. Pete and I met the campervan at Stockport, loaded kit and bikes onto rack, and we were en route to John O'Groats. We departed Stockport at 18:30. I offered …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="day-1-john-o-groats-to-fort-william"&gt;
&lt;h2&gt;Day 1 : John O' Groats to Fort William&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 90%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/screen-shot-2016-11-04-at-10-32-501.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After a long long drive for the support crew from Plymouth. Pete and I met the campervan at Stockport, loaded kit and bikes onto rack, and we were en route to John O'Groats. We departed Stockport at 18:30. I offered to do the first stint of driving up to the Highlands and my parents would drive the remainder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fully aware of what the next few days was going to entail, we both attempted to get some sleep during the latter part of the drive. Sleep however proved almost impossible as the Scottish roads became windier and windier as we pushed further north. It wasn’t until hearing the final pull of the handbrake, a quick check of the watch (05:00am), that we could afford ourselves 3 hour kip before the big start.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We awoke to a wild and windy day on the most north easterly tip of the U.K. - one assumes standard weather in these parts! A fair amount of faff ensued getting the bikes and kit ready for our first outing. Once kitted out, we left John O'Groats at 0906, glad to be out on the bikes after a long journey and starting to make a dent into the 847 miles that lay before us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our target was 4 full days (96 hours) which would have us reach Lands End by 0906 on Thursday. We’d calculated that in order to complete this and afford ourselves 6, 4 and 4 hours sleep on each of the respective nights, we’d need to hold 15mph average on the flats and 13mph avg on the hills.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2397-jpg2.png" /&gt;
&lt;p class="caption"&gt;Token signpost photo at John O'Groats before we set off&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2399-jpg2.png" /&gt;
&lt;p class="caption"&gt;We're off...&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The strong north easterly breeze off the North Sea varied between a cross and tailwind as we snaked southwards along the impressive east Scottish coastline. The roads were quiet, good condition and a mixture between fast flat sections and the odd massive hill!&lt;/p&gt;
&lt;p&gt;As we progressed down the coast, a huge swell approached battering the steep cliffs along the A9 bringing with it short but punchy rain shower - a little taster of things to come!&lt;/p&gt;
&lt;p&gt;With all best intentions to keep to our 15mph average, the tail wind was too tempting and we sped along the coast like a freight train. Jon's Garmin computer, our pacemaker for the journey, on battery saving mode to ensure it would last for up to 20 hours of riding kept us oblivious to our over ambitious start. Our first lunch stop, 60 miles in, at a layby overlooking the coastline, gave us a chance to check the average speed which was now pushing 17mph - we both agreed to try and calm down the pace if our legs were to have any chance of seeing through the remaining 814 miles.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 50%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img-20161015-wa0001-jpg.png" /&gt;
&lt;p class="caption"&gt;Oh dear - it was going to be a bit damp&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We continued to make good time, arriving into Inverness on schedule for our dinner break before pushing on along Loch Ness through the night to reach Fort William by midnight. The cold temperatures had caused my iPhone to fail so we couldn't get in touch with HQ. We rode for another 8 miles to the agreed camping spot, but there was no van to be seen! They had set up camp in Fort William, metres away from the point we stopped to try and call them. A rude awakening for the support crew as we continued to ride until they caught up with us again at around 1am. Into the van to warm up, gulp a protein shake, foam roller the quads and jump into bed for a few hours before getting ready to go again the next day.&lt;/p&gt;
&lt;p&gt;Leg 1 complete 194 miles in 15 hours 24 mins. Average speed: 15.7mph&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-2-fort-william-to-lockerbie"&gt;
&lt;h2&gt;Day 2 Fort William to Lockerbie&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/screen-shot-2016-11-04-at-10-33-411.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick breakfast followed by a kit check and we were on the road again by 9, both looking forward to the most spectacular leg of cycling - the scenic climb up to Glencoe followed by a course through the Highlands. The initial climb didn't disappoint. Calm conditions and a great road surface, we made it to the top feeling fresher than expected.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2402-jpg2.png" /&gt;
&lt;p class="caption"&gt;Pete midway up Glencoe, before the heavens opened&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_20161017_090210957_hdr-jpg.png" /&gt;
&lt;p class="caption"&gt;Jon and the waterfalls of Glencoe&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With less than a few minutes to enjoy the spectacular view at the top of Glencoe, ominous skies began to loom ahead. The storm brought with it a punishing headwind and torrential rain that forced us to endure several hours of the worst cycling conditions either had ever ridden in. Trucks travelling in the other direction to us brought with them a jet of icy water to the face, not to mention the gusts of wind that destabilised the bikes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The rain was so bad that the lining in my helmet disintegrated, pouring a liquid mush of glue and years of helmet sweat into my eyes making them scream! The glue blindness plus rain pouring over my glasses made me effectively blind on the busy A82! Thankfully our agreed lunch spot wasn't too far away, the famous ‘Green Welly Stop' in Tyndrum, near Crinlarich.&lt;/p&gt;
&lt;p&gt;Before looking twice at the roaring log burner, adjacent to the busy restaurant, we had both stripped down to our base layers, removing everything possible including shoes and socks in an attempt to dry our sodden clothes taken to much amusement of the restaurant guests. A mixture of Scottish Cullen Skink and Scottish fry ups consumed before the support van turned up with some dry socks!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_20161017_105510829-jpg.png" /&gt;
&lt;p class="caption"&gt;Drying our sodden kit on the Green Wellies log burner&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We maintained a good pace heading south towards the beautiful Loch Lomond as the rain subsided for a short time. This was short lived however as the descent into Dumbarton saw us once again saturated. We met the van for a quick pit stop at the station. Just before turning in, I spotted my friends Kris and wife Laura who live in nearby Helensburgh. Kris was hanging out of his car window as they drove by to ensure that we wouldn’t miss him! Kris and Laura joined us in the van for a tea and cake break, which was a great boost! After the refuel we headed off towards Glasgow.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2407-jpg.png" /&gt;
&lt;p class="caption"&gt;Kris and Laura after our cake stop in Dumbarton&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Navigating a city centre is always tricky. Thankfully my Garmin, despite some teething issues, actually managed to navigate us through the city centre in rush hour without much drama. The roads were surprisingly quiet but the sheer number of traffic lights (must have been about 50) meant a frustrating stop start ride for over an hour which took its toll on our average pace.&lt;/p&gt;
&lt;p&gt;With Glasgow behind us, we believed the most troublesome navigation was done for a good while. How wrong we were. A wrong turn in Hamilton, south of Glasgow, would force us to join a busy 3 lane dual carriageway, before peeling off on a 7 mile divert along the Clyde to finally join up with our original route just 2 miles from the junction we missed back in Hamilton. To add insult to injury, the diversion was also full of steep inclines, some of which were made up of slippery wet cobble stones! Today was not going to plan, we were behind schedule now and our target destination of Carlisle was looking far from achievable.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img-20161021-wa0002-jpg.png" /&gt;
&lt;p class="caption"&gt;The extent of our navigational woes in Hamilton!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;We continued riding till 1am and stopped for a few hours rest till morning in a layby near Lockerbie.&lt;/p&gt;
&lt;p&gt;Day 2 complete a below target 164 miles completed in 18 hours and 5 mins. Average speed - 12.4. &amp;nbsp;Oh dear!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-3-lockerbie-to-crewe"&gt;
&lt;h2&gt;Day 3 Lockerbie to Crewe&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/screen-shot-2016-11-04-at-10-34-111.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our parking spot for the night, situated on the ‘quiet’ B7076, left a lot to be desired. The B7076 runs along the M74 motorway, and is primarily used only for local traffic and for long distance lorry drivers pulling over for the night. At 4am a relentless charge of lorries set off one after the other. Every few minutes the camper would be violently shaken as articulated lorries flew passed at high speed just feet away from the van. An awful nights sleep was had by all!&lt;/p&gt;
&lt;p&gt;We had originally planned to meet my friends from Manchester in Lancaster at 9, but we were now severely behind schedule. We re-arranged the meeting point to Penrith and set off trying to make it there in time to meet their train at 11am. The morning was chilly but the sun was shining as we sped towards Gretna Green.&lt;/p&gt;
&lt;p&gt;As we approached the Lake District the terrain naturally became a bit tougher and the weather unleashed it's worst yet again. We arrived into Penrith in monsoonal conditions to find James and Brendan sheltering in the van with my&amp;nbsp;parents. A very extended lunch break put us further behind our 4 day schedule as we waited for the rain to ease. We gave up waiting and headed out into the storm, naturally 10 minutes later the rain cleared up! We soon found ourselves on an awesome climb up to the top of Shap peak at 1400 feet on the edge of the Lake District, a stunning descent into Kendal followed.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_20161018_144728101-jpg.png" /&gt;
&lt;p class="caption"&gt;Welcome company of James and Brendan at the top of Shap&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_20161018_144722673-jpg.png" /&gt;
&lt;p class="caption"&gt;Shap&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today&amp;nbsp;began with Jon entering the van with the words &amp;quot;I've got some great news, you've got a puncture&amp;quot;. Fortunately, a quick tube change ensued and we were only delayed by 12 minutes or so.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2412-jpg.png" /&gt;
&lt;p class="caption"&gt;Changing the first puncture on the 'quiet' B7076&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It was a beautiful crisp morning as we set off from Lockerbie. The sun on our faces&amp;nbsp;was&amp;nbsp;invigorating as we sped towards the border. Within a few hours we’d reached Gretna Green and crossed over to England by 11am. Road signs began to appear with ‘The South’ on them, providing a huge mental boost.&lt;/p&gt;
&lt;p&gt;By lunch the weather had turned and we arrived to our lunch stop in Penrith, water logged. There was no point changing clothes as the rain persisted throughout lunch and after we set off. I attempted to wring out my neoprene gloves, but it made little difference. For the first 10 miles post lunch I was shivering. Once the hills of the Lake District were in sight the rain eased and I finally started to warm up. The biggest climb of the day was up Shap. The long hills always provided the temptation to jump out the saddle in order to climb more aggressively but this also used up a lot more energy so I forced myself to stay in the saddle and keep to the small gears. After the climb we had one of the most scenic descents down into Kendal.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After the lakes, we joined the fast and flat(ish) section of the A6 between Kendal and Preston and stormed along in a racing formation with James and Brendan powering on the front Pete and I sat at the back taking advantage of some drafting allowing us to make up some time whilst preserving the legs as much as possible. As was becoming the norm for us by now, the heavens opened about 5 miles from our meeting point with the support van. Once again we would arrive sopping wet. A lovely meal provided by Chris and Vida for the 4 cyclists and another hour or so waiting for the rain to pass. The Manchester boys headed off to the train station whilst we waited till 9pm for the rain to stop before hitting the A6 south again.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2417-jpg.png" /&gt;
&lt;p class="caption"&gt;Team dinner after a long day in the lakes&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Another quick stop south of Preston for some roadside words of encouragement from another of my Jet2 colleagues before we were hit with heavy rain again in Warrington.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By now, we were midway through the third day and the 560 or so miles in the legs over the past few days were starting to take their toll. I was starting to run on empty. Completely sick of gels and carbohydrate powder. Welcome relief came via a midnight pit stop in McDonalds. We contemplated a ‘ride-through’ but decided to treat ourselves to the luxury of a sit down for 30 mins. The staff look rather confused as we wobbled through the door, desperately trying to avoid skidding across the floor in our cycle cleats. Before leaving someone asked us where we had cycled from and gave the most perplexed face followed by some words of encouragement: “good on ya lads, keep it going”. After our fast food binge, we headed off into the rain, finally making our stop for the night just south of Crewe at 3am.&lt;/p&gt;
&lt;p&gt;Day 3 complete. 190 miles in 15 hours. Average speed: 15mph.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-4-crewe-to-lands-end-the-final-push"&gt;
&lt;h2&gt;Day 4 - Crewe to Lands End - the final push!&lt;/h2&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/screen-shot-2016-11-04-at-10-34-491.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A very slow start for me this morning, I could barely eat my breakfast. On reflection I think I put a bit too much effort in riding with the Manchester boys the previous day! We were soon back on the road and enjoying some fast country lanes through Cheshire and Staffordshire, a mixture of rather busy dual carriageways and some city navigation led us to our lunch spot just south of Worcester. Bikes serviced and lots of food consumed we set off towards Bristol, navigating a busy Gloucester rush hour on the way. The hills in Bristol came as a nasty surprise, which was quickly rectified by a nice stop at Pete's friend Mel's house for some lovely homemade flapjack! Then a quick 8 mile sprint to our dinner stop just south of Bristol.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whilst unpleasant, todays dual carriageways did allow us to ride at a decent pace for a sustained period of time. Today was certainly the flattest section of riding we had done for a while and the legs were very much in need of it. The drafting with the Manchester boys the day before had helped to replenish my legs to an extent and today I was tired but strangely more comfortable on the bike than the first two days in fact.&lt;/p&gt;
&lt;p&gt;We made our way through Gloucester city centre just as the light was beginning to fade. By 8pm, we had passed through Bristol and over the clifton suspension bridge. A few miles out of the city we stopped off at my friend Mel's house - she had kindly baked flapjacks ready and waiting for our arrival. Those that didn’t get consumed were stuffed in any available jersey pockets. Whilst at Mel's I got to say a hello to 3 week old Thomas!&lt;/p&gt;
&lt;p&gt;A quick charge of the lights at Mel’s and we were off again. Less than an hours riding till designated stop for dinner. By the time we’d eaten we had 10 hours remaining to get to Lands End in under 4 days. We weren’t going to make our sub 4 day target. Despite this, we were still on for a good time, and bike ride aside I was working on Friday &amp;nbsp;so we had to get finished by Thursday! &amp;nbsp;On the cycle to dinner Jon and I concluded that an all-nighter was going to be the only way to make up the time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick dinner then back on the road at midnight. A crisp clear sky with calm winds allowed us to fire through Somerset very quickly, stopping in a rather delirious state of tiredness at two identical Budgen service stations. &amp;nbsp;A long drag of a climb brought us into Tiverton at 5am. We stopped for a snack in the 24 hour Tesco, where we were greeted by extremely friendly night staff who made us a cup of tea and went to fetch the famous cat ‘Mango’ that lives in the store for a team photo with us! Very odd, but very funny, it was good to be back in Devon!&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2435-jpg1.png" /&gt;
&lt;p class="caption"&gt;5am photograph with social media tycoon Mango the cat&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cycle through the night was both a mental and physical battle. Neither of our lights had sufficient charge to make it through the whole night so we had to ration the available resources between us by alternating who had their lights dimmed to conserve battery life. Visibility was reduced to a few metres, and the conversation between us dissipated.&lt;/p&gt;
&lt;p&gt;We made a few pit stops along the route between Somerset to Devon. The two Budgens services provided an opportunity for a quick break and caffeination for the nights riding. By the time we’d reached our third pit stop at the 24 hour Tesco in Tiverton, I could only manage to sit in the middle of the shop floor, whilst the kind staff provided us with tea from their canteen.&lt;/p&gt;
&lt;p&gt;As we approached 3am the temperatures plummeted and it became harder and harder to get going after the mini breaks. For the first time in the whole ride I was desperate for a hill to come along so I could warm up.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2434-jpg.png" /&gt;
&lt;p class="caption"&gt;Trying to hold it together in Tesco&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It was not long before my desire for hills would be fulfilled, over fulfilled in fact. We crossed the border to Devon just before 5am and to greet us were a set of climbs that were not to be sniffed at. These hills&amp;nbsp;would have posed a serious challenge on a casual Saturday afternoon jaunt, let alone in the state we were in! Because it was still pitch black at this time, the winding descents were just as much of a challenge due to fear of hitting potholes in the dark. Both our bodies were beginning to breakdown &amp;nbsp;- Jon and I were both suffering with sore knees amongst numerous other aches and pains which would occasionally result in an unannounced howl of: &amp;quot;aaarrgggghhhhh&amp;quot; as loud as possible in a bid to inform the other that we were 'feeling it'.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After Tiverton, the real test began. We were faced with horrific never ending 15 percent gradient climbs up to Crediton, where the temperature severely dropped, the fog rolled in and the rush hour traffic started. We were not in a happy place. It was so cold and we were stopping and starting with some mechanical issues with Pete's bike, I managed to strain my quad, which added further to our woes. Severe hill after severe hill followed before we finally made it to civilisation and a lovely clear morning in Okehampton. We pulled into Waitrose for a hit of caffeine, ibuprofen and sweet pastry treats.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2436-jpg1.png" /&gt;
&lt;p class="caption"&gt;Faces saying it all in Okehampton Waitrose after the all-nighter from Bristol&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Next up was the fabled A30, the main dual carriageway running from Exeter to Lands End. It is renowned amongst 'End to Enders' as it is by far the quickest route through Cornwall, cutting out all the very hilly country lanes akin to those we had experienced in Devon, but being a dual carriageway it is far from ideal for cyclists. Most people start at Lands End in the evening so that they can tackle the A30 during the quiet night time. We were about to hit it at 9:30am! &amp;nbsp;We were riding in a foot wide hard shoulder which was littered with rocks, glass and road kill, which inevitably led to our first roadside punctures, two in fact! We were able to meet the van for the second puncture repair where a kind local man, whose driveway we had blocked-leant us some tools, donated to our charity and gave us a great A30 avoiding shortcut, welcome to Cornwall!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don’t ever want to cycle on the A30 again. Despite being a fast route into the south west, &amp;nbsp;cars drive on it at&amp;nbsp;motorway speeds, probably because the M5 runs straight into it. The side section of the road was narrow and full of rubble, cat eye reflectors and even dead animals. At one point I found myself having to bunny hop the bike over a dead badger. Thankfully after a 15 mile or so stint on the A30 we reached Launceston and&amp;nbsp;broke off for quieter roads for 20 miles to avoid roadworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our diversion from the A30 north towards Wadebridge, gave us much quieter roads, beautiful weather and lovely scenery of the north Cornish coast.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, for the last part of the ride, we were blessed with some nice conditions, tailwind and sun shining. We were soon both overheating with our winter gear on. On into Cornwall and it felt like there was a light at the end of the tunnel. Much like Devon, the hills were a challenge but made all the more bearable by the fact that we didn’t have much further to go.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_20161020_145415003-jpg.png" /&gt;
&lt;p class="caption"&gt;Cornwall&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2444-jpg.png" /&gt;
&lt;p class="caption"&gt;Last stop at the camper before the finish - about 80 miles to go&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2445-jpg.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The backend of the A30 that we rejoined was more bearable than before due to better quality roads. Each mile of the 35 mile dual carriageway stint felt like an hour as we clawed our way to the finish. Signs for Penzance appeared and we both believed Lands End to be only 4 or 5 miles from there. Sadly once we reached Penzance it appeared that we would have another 10 miles ahead of us. These would be the longest 10 miles of the whole trip. The winding road into Lands End is full of super steep hills, and we were both reaching breaking point. As the sun began to set as we kept mistaking Lands End in the distance only to realise that we had a few more arduous miles to endure before we would be done.&lt;/p&gt;
&lt;p&gt;The relief to see both sets of parents waiting at the finish was incredible. I couldn’t quite believe it was finally over and we’d done it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After our deviations off the A30, it wasn't long before we were back on it, this time in the evening rush hour making our final push into the setting sun for Lands End. 35 miles of dual carriageway riding later and we eventually dropped into Penzance, with lovely views of St Michaels mount. The last 10 miles took forever, with several punishing hills remaining to completely finish us off! We pulled into Lands End at 19:11 on Thursday where we were welcomed home by both sets of parents, a moment we were both looking forward to for quite some time!&lt;/p&gt;
&lt;p&gt;Day 4 complete 334 miles in 33 hours 47 minutes. Average speed 14.5&lt;/p&gt;
&lt;p&gt;Mission complete - total distance 870 miles in 85 hours 26 minutes (technically less than 4 days out on the bikes) overall average speed 14.4mph.&lt;/p&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2451-jpg.png" /&gt;
&lt;p class="caption"&gt;Made it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2448-jpg.png" /&gt;
&lt;/div&gt;
&lt;div class="figure align-center" style="width: 70%"&gt;
&lt;img alt="" src="https://peterwooldridge.me/posts/2016/Nov/03/jogle_in_106/img_2452-jpg.png" /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Jon&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thank you all for all your support, especially to my parents for doing such a great job looking after us on this epic challenge! We've done a great job raising a huge amount of money for our charity Diabetes UK, so thank you all for your donations along the way!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pete&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thank you so much to everyone who supported us and helped raise money for Diabetes UK, a cause very close to my heart. A huge thank you is also in order to Jon's parents for all the cooking, cleaning, clothes drying, tea making, bike fixing and generally supporting us along the way - we couldn't have done it without you!&lt;/p&gt;
&lt;p&gt;Jon and Pete - resting up for a few days!&lt;/p&gt;
&lt;/div&gt;
</content><category term="endurance"></category></entry></feed>